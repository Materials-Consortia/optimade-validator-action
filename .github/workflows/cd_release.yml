name: Update tag vMAJOR upon release of newest vMAJOR.MINOR.PATCH version

on:
  release:
    types: [published]

env:
  PUBLISH_UPDATE_BRANCH: master
  GIT_USER_NAME: OPTIMADE Developers
  GIT_USER_EMAIL: "dev@optimade.org"

jobs:
  publish:
    name: Publish OPTIMADE validator action
    runs-on: ubuntu-latest
    if: github.repository == 'Materials-Consortia/optimade-validator-action' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.9

    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools wheel

        while IFS="" read -r line || [ -n "${line}" ]; do
          if [[ "${line}" =~ ^invoke.*$ ]]; then
            invoke="${line}"
          fi
        done < requirements.txt

        pip install ${invoke}

    - name: Update changelog
      uses: CharMixer/auto-changelog-action@v1
      with:
        token: ${{ secrets.RELEASE_PAT_CASPER }}
        release_branch: ${{ env.PUBLISH_UPDATE_BRANCH }}

    - name: Update version and tags
      run: .github/utils/update_version.sh

    - name: Update '${{ env.PUBLISH_UPDATE_BRANCH }}'
      uses: CasperWA/push-protected@v2
      with:
        token: ${{ secrets.RELEASE_PAT_CASPER }}
        branch: ${{ env.PUBLISH_UPDATE_BRANCH }}
        unprotect_reviews: true
        force: true
        tags: true

    - name: Get tagged versions
      run: echo "PREVIOUS_VERSION=$(git tag -l --sort -version:refname | sed -n 2p)" >> $GITHUB_ENV

    - name: Create release-specific changelog
      uses: CharMixer/auto-changelog-action@v1
      with:
        token: ${{ secrets.RELEASE_PAT_CASPER }}
        release_branch: ${{ env.PUBLISH_UPDATE_BRANCH }}
        since_tag: "${{ env.PREVIOUS_VERSION }}"
        output: "release_changelog.md"

    - name: Append changelog to release body
      run: |
        gh api /repos/${{ github.repository }}/releases/${{ github.event.release.id }} --jq '.body' > release_body.md
        cat release_changelog.md >> release_body.md
        gh api /repos/${{ github.repository }}/releases/${{ github.event.release.id }} -X PATCH -F body='@release_body.md'
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_PAT_CASPER }}
